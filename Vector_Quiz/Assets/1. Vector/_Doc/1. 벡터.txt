====================================================================
	벡터
====================================================================
	목표
		-	벡터의 기능중
			게임제작에 필요한 부분을
			주로 이해..
====================================================================
1.	벡터의 정의..
====================================================================

	----------
	1>	정의..
		[ 참고 : https://koreanfoodie.me/420 ]
	----------

		-	크기와 방향을
			관리하는 데이터 타입..

		-	위치, 속도, 힘 등..


	----------
	2>	종류..
	----------

		===============================
		기준	|	벡터..
		===============================
		차원..	|	평면 vs 공간 벡터..
		-------------------------------
		용도..	|	위치 vs 변위 벡터..
		===============================



	---------------
	3>	게임 제작시
		주요 용도..
	---------------

		-	게임 오브젝트의 위치..

		-	리지드 바디의 속도..
			( Rigidbody )

		-	변위..
			-	어떤 위치의 값에서
				이전 위치의 값을 차감한
				벡터량..
				
			-	어떤 오브젝트의
				최종 위치와 이전 위치
				사이의 차이..
				( 출처 : https://ko.wikipedia.org/wiki/%EB%B3%80%EC%9C%84 )

			-	이동 간격, 방향,
				속도 등..

		-	스크립트 작성시
			[ Vector3 ]이 등장하면
			어떤 용도를 위해 만들었는지
			구분할 수 있어야함..

			[ 참고 : 1. Vector Basic ]
			-	[ 위치값 ]
			-	[ 변위값 ]
				-	[ 방향값 ], [ 이동 간격 ],
					[ 속도 ] 등..
			


	---------------
	4>	주요 특징..
		[ 참고 : SMyVector3.cs ]
	---------------

		-	벡터 A == 벡터 B
			[ 참고 : https://iagreebut.tistory.com/53 ]

			-	크기와 방향이
				같은 벡터..

			-	위치와 무관..
				

		-	연산..
			( Va = V( ax, ay, az )
			  라고 가정.. )

			-	두 벡터간의 덧셈..
				[ 참고 : SMyVector3.+ ]

				-	Va + Vb
					=	V( ax + bx, ay + by, az + bz )

				-	교환법칙 성립..
				

			-	뻴셈..
				[ 참고 : SMyVector3.- ]

				-	Va - Vb
					=	V( ax - bx, ay - by, az - bz )

				-	교환 법칙 불가..					
					-	연산 후 생성된
						벡터의 방향이
						바뀔수 있음..


			-	역벡터..
				[ 참고 : SMyVector3.Inverted ]

				-	길이는 같으나
					방향이 반대인 벡터..

				-	Va의 역벡터
					=	-Va..


			-	스칼라 곱 / 나눗셈..
				[ 참고 : SMyVector3.*
						, SMyVector3./ ]

				-	Va * c
					=	V( ax * c, ay * c, az * c )

				-	분배 법칙 성립..
					-	c가 스칼라량 일때,
						c ( Va + Vb )
						=	cVa + cVb..

					-	스칼라..
						[ 참고 : https://namu.wiki/w/%EC%8A%A4%EC%B9%BC%EB%9D%BC ]
						-	방향을 다루지 않고
							크기만 다루는 물리량..


			-	내적..
				[ 참고 : SMyVector3.Dot ]

				-	Va . Vb
					=	Vax * Vbx
						+ Vay * Vby
						+ Vaz * Vbz


			-	외적..
				[ 참고 : SMyVector3.Cross ]

				-	Va X Vb
					= V( ay * bz - az * by,
						 az * bx - ax * bz,
						 ax * by - ay * bx )


			-	크기..
				[ 참고 : SMyVector3.Magnitude ]

				-	벡터의 길이..

				-	벡터 A의 크기..
					( || A || or | A | )
					=	루트( Ax제곱 + Ay제곱 + Az제곱 )
						-	Vector3.magnitude 제공..

				-	제곱근 연산은
					연산 비용이
					많이 소요 됨..

					-	벡터간의 크기만 비교할 경우,
						( 대략의 비교로 충분한 경우.. )
						제곱한 값끼리
						비교하는 것으로 충분..

						=	( Ax제곱 + Ay제곱 + Az제곱 )
							-	Vector3.sqrMagnitude 제공..


			-	단위 벡터..
				( unit vector )
				[ 참고 : SMyVector3.Normalize()
						, SMyVector3._normalized ]

				-	크기가 1인 벡터..

				-	Va의 크기가 m이라고 할때,
					Va의 단위 벡터
					=	V( ax / m, ay / m, az / m )

				-	정규화( normalized )
					-	단위벡터로 만드는
						연산과정..

				-	Vector3.normalized
					프로퍼티 지원..

					-	해당 벡터의	정규화된 값을
						반환할 뿐 해당 벡터 자체를
						정규화 하지는 않음..
						-	벡터 자체를 정규화..
							-	Vector3.Normalize()..


			-	두 벡터간 거리..
				[ 참고 : SMyVector3.Distance() ]
				-	Va ~ Vb 간의 거리..
					=	( Va - Vb )의 크기..

			
		-	( Va + Vb ) + Vc
			== Va + ( Vb + Vc )
			결합 법칙 성립..


		-	Va에 -Va를 더하면
			원래 시점으로 돌아오고,
			길이는 0인 영벡터가 됨..

			-	영벡터..
				-	길이는 0이며
					방향이 없는 벡터..

		
		-	법선 벡터..
			( normal vector )

			-	어떤 벡터나 평면에
				수직인 벡터..

			-	정규화와 영어 표현이 비슷..
				( normalized )

				-	실제 사용될 때도
					법선벡터를 정규화 하여
					사용하는 경우가 많음..

				-	방향 벡터를 이용하는 경우
					정규화를 많이 활용함..

	
	----------
	5>	내적..
		[ 참고 : https://assortrock.com/8?category=635929 ]
	----------

		-	정의..

			-	두 벡터를
				하나의 스칼라 양으로
				변환하는 연산..

			-	삼각형의 내각 @를 이루는
				두 벡터 a,b의 내적..
				[ 참고 : https://seebear.tistory.com/82 ]
				-	a . b
					= |a| |b| cos@

				-	Vector3.Dot 지원..

			-	투영벡터를 구할 수 있음..
				a, b가 단위 벡터일때,( |a|,|b| == 1 )
				a . b	=	|a||b| cos@
						=	cos@..
							[ 참고 : https://www.geogebra.org/m/avzqhmzx ]

			-	방향 벡터를 이용하여 연산하는 경우,
				단위벡터를 이용하면 계산이
				용이해질수 있음..

				-	Vector3.normalized,
					Vector3.forward 등을 지원..

			-	직교투영을 구하는 함수 지원..
				-	Vector3.Project..
		


		-	응용..
			[ 참고 : https://www.geogebra.org/m/avzqhmzx ]

			a, b가 단위 벡터일때..
			|a| |b| == 1..

			-	Va, Vb 가 평행인 경우..

				-	평행..
					=	완전히 같은 방향..
					=	사잇각( @ )이 0..

				-	a . b 
					=	|a| * |b| * ( cos( 0 ) )
					=	|a| * |b| * 1
					=	1 * 1


			-	Va, Vb의 사잇각 @가
				90도 미만..
				-	cos( @ ), @ 는 90도 미만..
					=	0 ~ 1..


			-	Va, Vb가 수직..
				-	@는 90도..
				-	cos(90)..
					=	0..
					

			-	Va, Vb의 사잇각 @가
				90 ~ 180도 미만..
				-	cos( @ ), @ 는 90 ~ 180도 미만..
					= -1 ~ 0..

			-	두벡터 a, b 가
				반대방향.
				-	@는 180도..
				-	cos( 180 )
					=	-1..



	----------
	6>	외적..
		[ 참고 : https://assortrock.com/24?category=635929 ]
	----------

		-	정의
			-	평행하지 않은
				두 개의 벡터에
				동시에 수직인 벡터..

		-	특징
			-	교환 법칙이
				성립 안됨..
				
				A x B !=  B x A
				A x B == -B x A

				->	곱하는 순서 중요 !!

					오른손 좌표계..
					-	암페어( 앙페르 )의
						오른손 나사 법칙..
						
					왼손 좌표계
					-	왼손 나사 법칙..
						-	유니티!!!

					( 참고 : https://datacookbook.kr/86
							 https://www.codechosun.com/336)

			-	Vector3.Cross 지원..



		-	응용..

			-	평면의 법선 벡터
				구하기..

				-	평면에 포함된 
					삼각형의 두변을 이루는
					벡터의 외적을 구한 후
					정규화..
					-	해당 삼각형이 존재하는
						평면의 법선벡터를
						구할 수 있음..


			-	내적과 함께
				응용..

				-	적과 유저 캐릭터의 방향..

					1)	유저 캐릭터의 정면 벡터와
						적의 정면 벡터를 계산..
						( 외적 이용 )
						-	우측 벡터 X 상단 벡터 외적..
						-	transform.forward..

					2)	해당 법선 벡터들을
						정규화..

					3)	정규화된 각 법선벡터의
						내적 계산..

						-	결과가 1에 근접..
							-	서로 같은 방향을
								향하고 있음..

						-	결과가 -1에 근접..
							-	서로 반대 방향 또는
								마주보고 있음..

====================================================================//
[ 참고 ]

	유니티로 배우는 게임 수학 일부 발췌
	https://datacookbook.kr/86
	https://blog.naver.com/fear2002/221245587214
	https://docs.unity3d.com/kr/2019.4/Manual/ComputingNormalPerpendicularVector.html
	https://ko.wikipedia.org/wiki/%EB%B3%80%EC%9C%84
			
	벡터의 뜻, 표시, 크기, 상등..
	https://koreanfoodie.me/420
	벡터의 덧셈, 뺼셈..
	https://koreanfoodie.me/421
	벡터의 실수배,벡터의 평행..
	https://koreanfoodie.me/422
			
	내적 증명..
	https://blog.naver.com/jihyoseok/221481723291
	https://playground10.tistory.com/74
	https://assortrock.com/8?category=635929

	외적 증명..
	https://j1w2k3.tistory.com/1158
	https://assortrock.com/24?category=635929

	게임에서 벡터의 내적,외적 활용..
	https://gnaseel.tistory.com/18
			
	Chapter 03. 2D에서 외적의 의미
	https://www.codechosun.com/336

	[수학I] 16. 삼각함수(sin,cos,tan)의 그래프, 사인 코사인 탄젠트 개형(개념+수학문제)
	https://calcproject.tistory.com/430

	삼각함수 코사인함수
	https://www.geogebra.org/m/avzqhmzx

====================================================================