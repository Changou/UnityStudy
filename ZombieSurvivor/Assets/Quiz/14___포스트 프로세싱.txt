=============================================================================
14.	포스트 프로세싱..
=============================================================================
0>	학습 목표.
	-	포스트 프로세싱 스택을
		적용하여 게임에
		영상미 추가..

=============================================================================
1>	포스트 프로세싱 스택..
=============================================================================

	---------------------
	-	포스트 프로세싱..
	---------------------

		-	카메라 후처리..

		-	게임 화면이 최종 출력되기 전에
			카메라의 이미지 버퍼에
			추가 처리를 삽입..

		-	카메라에 필터를 적용하는 것과
			유사..

		-	유니티에서는
			[ 포스트 프로세싱 스택 패키지 ] 지원..
			
			-	설치..	( 2020 1.11f1 기준.. )

				1)	[ 메뉴 ]
					> [ Window ]
					> [ Package Manager ]
					> [ Package ] 카테고리
					-	[ Unity Registry ] 선택..

						====================================
							타입..		|	설명..
						====================================
						Unity Registry	|	패키지 레지스트리에 
										|	등록된 패키지들..
										|	-	https://docs.unity3d.com/kr/2022.3/Manual/fs-install.html
						------------------------------------
						In Project		|	프로젝트에 
										|	설치된 패키지..
						------------------------------------
						My Assets		|	에셋스토어에서 
										|	다운 받은 패키지..
						------------------------------------
						Built-in		|	유니티에 내장된 
										|	패키지..
						====================================
					
				2)	[ Package 목록 ]
					> [ Post Processing ]
					> 우측하단
					> [ Install ]



=============================================================================
2>	렌더링 경로 설정..
=============================================================================

	-	포스트 프로세싱을
		적용하기 전에
		카메라 렌더 세팅을
		변경..


	-	과정..

		1)	[ Hierachy ]
			> [ Main Camera ] 선택..

		2)	[ Rendering Path ]
			-	[ Deffered ]
			-	경로
				-	[ Main Camera ]
					> [ Camera 컴포넌트 ]
					> [ Rendering Path ]

			-	렌더링이 처리되는
				순서와 방법을 결정..

			-	기본값..
				-	포워드 렌더링..
					( Forward Rendering )

			-	포워드 렌더링 vs 디퍼드 렌더링
				====================================================================
						|	포워드 렌더링				|	디퍼드 렌더링
				====================================================================
				방식	|	각각의 오브젝트를			|	라이팅 연산을 
						|	그릴 때마다 				|	지연하여 처리.
						|	해당 오브젝트에 			|	1)	첫 번째 단계에서
						|	영향을 주는					|			( 패스 )
						|	모든 조명도 함께			|		오브젝트의 메시를
						|	연산하는 방식..				|		렌더링..
						|								|		-	조명 연산이나
						|								|			색은 제외..
						|								|		-	오브젝트의
						|								|			정보들을
						|								|			종류별로
						|								|			버퍼에 저장..
						|								|	2)	두 번째 단계에서
						|								|		첫 번째 패스의 
						|								|		정보를 활용해
						|								|		조명 연산 및
						|								|		최종 색 결정..
				====================================================================
				특징	|	메모리 사용량이 적고		|	기기의 성능이
						|	저사양에서도 				|	어느 정도 지원되야함..
						|	비교적 잘 동작..			|	멀티 렌더 타겟 기능 필요..
						|								|	-	한 번에 여러 개의
						|								|		버퍼에 한꺼번에
						|								|		렌더링..
						 -----------------------------------------------------------
						|	조명 표현이 				|	광원의 효과도 
						|	실제보다 간략화 됨..		|	올바르게 표현됨..
						 -----------------------------------------------------------
						|	연산속도가 느리며,			|	MSAA 같은 
						|	오브젝트나 광원이 			|	일부 안티엘리어싱 설정을 
						|	움직이거나					|	제대로 지원하지 않음..
						|	수가 많으면					|	-	안티엘리어싱..
						|	연산량 급증..				|		-	계단 현상 제거..
						 -----------------------------------------------------------
						|	하나의 오브젝트에 대해		|	갯수 제한 없이 
						|	최대 4개의 조명만			|	광원 표현 가능..
						|	제대로 개별연산..			|
						|	-	나머지 조명과			|
						|		라이팅 효과는 			|
						|		부하를 줄이기 위해		|
						|		합쳐서 한번에 연산..	|
						|	-	라이팅 효과가			|
						|		실제와 다르게			|
						|		표현될 수 있음..		|
				====================================================================


		3)	[ MSAA ]
			-	[ Off ]
			-	Multi-Sampling Anti-Aliasing
				다중 표본화..
				( 참고 : https://m.blog.naver.com/wkdghcjf1234/220310980966
						 [ MSAA Example.scene ]  )
			-	경로
				-	[ Main Camera ]
					> [ Camera 컴포넌트 ]
					> [ MSAA ]
			


=============================================================================
3>	포스트 프로세싱 적용.
	[ 참고	:	https://unity3dstudy.com/2020/05/28/PostProcessing/ ]
=============================================================================

	-------------------------------------------------------
	1)	카메라에 [ 포스트 프로세스 레이어 컴포넌트 ] 적용..
	-------------------------------------------------------

		-	과정..

			1)	[ Hierachy ]
				> [ Main Camera ] 선택.
				-	레이어 추가  ..
					-	[ 이름 ]
						-	[ PostProcessing ]

			2)	[ Main Camera ]
				> [ Post-process Layer 컴포넌트 ] 추가..

			3)	[ Post-process Layer 컴포넌트 ] 속성 설정..
				
				-	[ Layer ]
					-	[ PostProcessing ]

					-	[ Post-process Layer ] 자체는
						설정 정보를 가지고 있지 않음..

						-	포스트 프로세싱 볼륨을
							감지하고 설정값을 얻어와
							카메라에 적용..

						-	씬의 모든 게임 오브젝트들에 대하여
							포스트 프로세싱 볼륨을 감지하면
							성능에 악영향..

						-	특정 레이어에 대해서만
							포스트 프로세싱 볼륨을
							감지하도록 설정..

					[ Anti-aliasing ]
					> [ Mode ]

					-	[ FXAA ]

					-	물체의 경계선을 매끄럽게
						그리도록 계단 현상 제거..

					-	[ FXAA ]

						-	전반적인 품질은 높지 않지만
							성능저하가 가장 적고
							연산이 빠름..


	
	-------------------
	2)	포스트 프로세스
		볼륨 추가..
	-------------------

		-	작동원리..

			1)	[ 포스트 프로세스 볼륨 ]의
				컬라이더와
				[ 포스트 프로세스 레이어 ]의
				Trigger 필드에 게임 오브젝트의
				위치가 겹침..

			2)	해당 [ 포스트 프로세스 볼륨 ]의
				효과가 [ 포스트 프로세스 레이어 ]를
				거쳐 [ 카메라 ]에 적용됨..

		
		-	과정..
			
			1)	[ Post-process Volume 게임 오브젝트 ] 생성..
				-	[ 우클릭 in Hierachy ]
					> [ Create ]
					> [ 3D Object ]
					> [ Post-process Volume ] 선택..

			2)	[ Post-process Volume 게임 오브젝트 ] 속성 설정..
				-	[ Layer	]
					-	[ PostProcessing ]

				-	[ IsGlobal ]
					-	[ On ]
					-	카메라 위치와 상관없이
						일괄적으로 효과 적용..
	


	---------------------------------------
	3)	[ 포스트 프로세스 프로파일 ] 할당..
	---------------------------------------

		------------------------------
		-	포스트 프로세스 프로파일..
		------------------------------

			-	사용할 효과 목록을
				관리하는 프리셋 파일..
				-	프리셋 파일..
					-	미리 설정된 파일..


		----------
		-	과정..
		----------

			1)	[ 우클릭 in Project ]
				> [ Create ]
				> [ Post-processing Profile ] 선택. .
				-	이름
					-	[ Global Profile ]

			2)	효과 설정..
				-	[ Global Profile ]
					> [ Add effect ]

			3)	[ Post-process Volume in Hierachy ]
				> [ Profile ] 에 할당..



		--------------
		-	주요 효과..
		--------------

			-	모션 블러..
				( Motion Blur )
				-	빠르게 움직이는
					물체에 대한 잔상..

			-	블룸..
				( Bloom )
				-	일명 "뽀샤시" 효과..
				-	밝은 물체의 경계에
					빛이 산란되는 효과..

			-	컬러 그레이딩..
				( Color Grading )
				-	사진 필터..
				-	최종 컬러, 대비,
					감마등 교정..

			-	색 수차..
				( Chromatic Aberration )
				-	"방사는 중독" 효과.
				-	이미지의 경계가 번지고
					삼원색이 분리되는 효과..
				-	주로 방사능이나 중독 효과
					표현에 사용..

			-	비네트..
				( Vignette )
				-	화면 가장자리의 채도와
					명도를 낮추는 효과..

				-	화면 중심에 포커스를 주고
					차분한 느낌을 연출할 때
					주로 사용..

			-	그레인..
				( Grain )
				-	화면에 입자 노이즈 추가..
				-	필름 영화 같은 효과,
					공포 분위기 강화에
					주로 사용..



	------------
	4>	마무리..
	------------
		-	[ Audios 폴더 ]
			> [ Music.mp3 ] 파일을
			[ GameManager 게임 오브젝트]로
			드래그 & 드롭..
			-	속성..
				-	[ Play On Awake ]
					-	[ On ]
				-	[ Loop ]
					-	[ On ]
	
			
=============================================================================
	[ 참고 ]

		[Unity] Unity Package Manager ( 유니티 패키지 매니저 UPM )
		https://everyday-devup.tistory.com/81
				
		패키지 리스트 컨텍스트
		https://docs.unity3d.com/kr/2022.1/Manual/upm-ui-filter.html

		(기초) 포워드 VS 디퍼드 렌더링
		https://tsyang.tistory.com/118

=============================================================================
/*
	Q )	지금까지 배운 내용을
		참고로하여 
		게임을 커스터마이징..
		
		아래 4가지 사항은
		필수로 적용..

		-	그외 커스터 마이징의
			규모와 내용은 각자 자율..

			1)	스테이지 2개와 적들을 추가..
				-	에셋스토어에서
					지형 2개와 적 캐릭터를
					다운로딩..				

			2)	각각의 스테이지는
				3개의 웨이브를 통과해야
				이동 가능..

			3)	스테이지 시작시 게임에서 획득한
				코인을 이용하여 플레이어의 HP,
				공격력, 탄환수 등 하나의 속성을
				업그레이드 가능..

			4)	스테이지 이동시 적의 공격력과
				방어력 증가..

			5)	플레이어가 좀비의 추적 범위를 벗어나면
				대기상태로 전이..

			6)	로비 화면 만들기..
				-	권총, 기관총, 바주카 중 
					택일하여 게임 진행..
		 
*/
=============================================================================
	
	[ 참고 ]

		게임 그래픽 옵션? SSAA, MSAA
		https://m.blog.naver.com/wkdghcjf1234/220310980966

		포워드 랜더링, 디퍼드 랜더링.
		https://m.blog.naver.com/blue9954/220296252565

=============================================================================